class Rotation
{
	type = "rotation";
	memory = 1;
	minValue = 0;
	maxValue = 1;
	angle0 = 0;
	angle1 = 1;
};	
	
class CfgSkeletons
{
	class Default
	{
		isDiscrete = 1;
		skeletonInherit = "";
		skeletonBones[] = {};
	};
	class Vehicle : Default {};	
	class Plane: Vehicle
	{
		skeletonInherit="Vehicle";
		skeletonBones[]=
		{
			"alt","",
			"alt2","",
			"mph","",
			"mph2","",
			"vert_speed","",
			"vert_speed2","",
			"nm_alt","",
			"hud_alt","",
			"hud_speed","",
			"rpm","",
			"kompas","",
			"kompas2","",
			"hodinova","",
			"hodinova2","",
			"minutova","",
			"minutova2","",
			"lkh klapka","",
			"pkh klapka","",
			"lkd klapka","",
			"pkd klapka","",
			"leva smerovka","",
			"leva vejskovka","",
			"prava smerovka","",
			"prava vejskovka","",
			"ls klapka","",
			"ps klapka","",
			"predni kolo","",
			"levy kolo","",
			"pravy kolo","",
			"vrtule 1","",
			"vrtule","",
			"damageHide",""
		};
	};
	class Plane_Base_F: Plane
	{
		skeletonInherit = "Plane";
		skeletonBones[] =
		{
			"stick_pilot",""
		};
	};
	class Test_Plane_01_skeleton: Plane_Base_F
	{
		isDiscrete = 0;
		skeletonInherit = "Plane_Base_F";
		skeletonBones[] =
		{
			"horizontBank","",
			"horizont","HorizontBank",
			"horizont2","",
			"rotor","",
			"flapL","",
			"flapR","",
			"elevatorL","",
			"elevatorR","",
			"rudder","",
			"rudder_Small","rudder",
			"aileronL","",
			"aileronR","",
			"airbrake1","",
			"airbrake2","",
			"canopy1","",
			"canopy2","",
			"gear_1_hatch_1","",
			"gear_1_hatch_2","",
			"gear_1","",
			"gear_1_steering","gear_1",
			"gear_1_Steering2","gear_1",
			"gear_1_damper","gear_1_steering",
			"gear_1_stabil_1","gear_1_steering",
			"wheel_1","gear_1_stabil_1",
			"gear_2","",
			"gear_2_damper","gear_2",
			"gear_2_stabil","gear_2",
			"wheel_2","gear_2_stabil",
			"gear_2_hatch","",
			"gear_3","",
			"gear_3_damper","gear_3",
			"gear_3_stabil","gear_3",
			"wheel_3","gear_3_stabil",
			"gear_3_hatch","",
			"ladder","",
			"ladder_1","",
			"rpm1","",
			"rpm2","",
			"rpm3","",
			"rpm4","",
			"rpm5","",
			"rpm6","",
			"rpm7","",
			"rpm8","",
			"kompas1","",
			"sekundova","",
			"climb","",
			"speed","",
			"fuel","",
			"monitory","",
			"z_scalpel","",
			"z_asraam_out","",
			"z_asraam_mid","",
			"z_mk82","",
			"z_gbu12","",
			"z_zephyr","",
			"z_dar","",
			"rocketA1","z_dar",
			"rocketA2","z_dar",
			"rocketA3","z_dar",
			"rocketA4","z_dar",
			"rocketA5","z_dar",
			"rocketA6","z_dar",
			"rocketA7","z_dar",
			"rocketA8","z_dar",
			"rocketA9","z_dar",
			"rocketA10","z_dar",
			"rocketA11","z_dar",
			"rocketA12","z_dar",
			"rocketB1","z_dar",
			"rocketB2","z_dar",
			"rocketB3","z_dar",
			"rocketB4","z_dar",
			"rocketB5","z_dar",
			"rocketB6","z_dar",
			"rocketB7","z_dar",
			"rocketB8","z_dar",
			"rocketB9","z_dar",
			"rocketB10","z_dar",
			"rocketB11","z_dar",
			"rocketB12","z_dar",
			"zasleh","",
			"ramp",		"",
			"ramp2",		"",
			"Gear_1_Strut",		"",
			"LeftBay",		"",
			"RightBay",		"",
			"PositionLights",		"",
			"CollisionLight_Red",	"",
			"CollisionLight_White",	"",
			"mainturret","",
            "maingun","mainturret",
			"zasleh","maingun",
			"turret2","",
            "gun2","turret2",
			"turret3","",
            "gun3","turret3",
			"turret4","",
            "gun4","turret4",
			"turret5","",
            "gun5","turret5"
		};
	};
};
class CfgModels
{
	class Default
	{
		sectionsInherit="";
		sections[] = {};
		skeletonName = "";
	};
	class Vehicle: Default
	{
		sections[] =
		{
			"cislo",
			"grupa",
			"side",
			"sektor",
			"clan",
			"clan_sign",
			"podsvit pristroju",
			"poskozeni",
			"L svetlo",
			"P svetlo",
			"ramp",
			"Gear_1_Strut",
			"zasleh"
		};
	};
	class Plane: Vehicle
	{
		htMin = 60;		// Minimum half-cooling time (in seconds)
		htMax = 1800;	// Maximum half-cooling time (in seconds)
		afMax = 200;	// Maximum temperature in case the model is alive (in celsius)
		mfMax = 100;	// Maximum temperature when the model is moving (in celsius)
		mFact = 0;		// Metabolism factor - number from interval <0, 1> (0 - metabolism has no influence, 1 - metabolism has full influence (no other temperature source will be considered)).
		tBody = 0;	 	// Metabolism temperature of the model (in celsius)


		sectionsInherit="Vehicle";
		sections[]=
		{
			"vrtule staticka",
			"vrtule blur",
			"trup",
			"zbytek"
		};
		skeletonName="Plane";
		class Animations
		{
			class damageHide
			{
					type="hide";
					source="damage";
					selection="damageHide";
			};
			class IndicatorAltBaro: Rotation
			{
				source="altBaro";
				sourceAddress="loop";
				selection="alt";
				axis="osa_alt";
				memory=0;
				maxValue=304;
				angle1="rad -360";
			};
			class IndicatorAltBaro2: IndicatorAltBaro
			{
				selection="alt2";
				axis="osa_alt2";
			};
			class IndicatorAltRadar: Rotation
			{
				source="altRadar";
				selection="nm_alt";
				axis="osa_nm_alt";
				memory="false";
				maxValue=61;
				angle1="rad -180";
			};
			class IndicatorAltRadar2: IndicatorAltRadar
			{
				selection="nm_alt2";
				axis="osa_nm_alt2";
			};
			class IndicatorSpeed: Rotation
			{
				source="speed";
				selection="mph";
				axis="osa_mph";
				memory="false";
				maxValue=125;
				angle1="rad -320";
			};
			class IndicatorSpeed2: IndicatorSpeed
			{
				selection="mph2";
				axis="osa_mph2";
			};
			class IndicatorVertSpeed: Rotation
			{
				source="vertSpeed";
				selection="vert_speed";
				axis="osa_vert_speed";
				minValue=-30;
				maxValue=30;
				angle1="rad -300";
			};
			class IndicatorVertSpeed2: IndicatorVertSpeed
			{
				selection="vert_speed2";
				axis="osa_vert_speed2";
			};
			class IndicatorRPM: Rotation
			{
				source="rpm";
				selection="rpm";
				axis="osa_rpm";
				memory="false";
				maxValue=12;
				angle1="rad -320";
			};
			class IndicatorRPM2: IndicatorRPM
			{
				selection="rpm2";
				axis="osa_rpm2";
			};
			class IndicatorCompass: Rotation
			{
				source="direction";
				selection="kompas";
				axis="osa_kompas";
				memory="false";
				minValue=-3.141593;
				maxValue=3.141593;
				angle1="rad -360";
			};
			class IndicatorCompass2: IndicatorCompass
			{
				selection="kompas2";
				axis="osa_kompas2";
			};
			class WatchHour: Rotation
			{
				source="clockHour";
				selection="hodinova";
				axis="osa_time";
				memory="false";
				angle1="rad -360";
			};
			class WatchHour2: WatchHour
			{
				selection="hodinova2";
				axis="osa_time2";
			};
			class WatchMinute: Rotation
			{
				source="clockMinute";
				selection="minutova";
				axis="osa_time";
				memory="false";
				angle1="rad -360";
			};
			class WatchMinute2: WatchMinute
			{
				selection="minutova2";
				axis="osa_time2";
			};
			class FWheel
			{
				type="rotation";
				source="gear";
				selection="predni kolo";
				axis="osa predniho kola";
				minValue=-1;
				maxValue=1;
				angle0="rad -104.4";
				angle1="rad 104.4";
			};
			class LWheel: FWheel
			{
				selection="levy kolo";
				axis="osa leveho kola";
				angle0="rad -81";
				angle1="rad 81";
			};
			class RWheel: LWheel
			{
				selection="pravy kolo";
				axis="osa praveho kola";
			};
			class FWheelRot
			{
				type="rotationX";
				source="wheel";
				selection="predni kolo rot";
				axis="predni kolo rot";
				memory="false";
				minValue=0;
				maxValue=2;
				sourceAddress="loop";
				angle0=0;
				angle1="-rad 360";
			};
			class LWheelRot: FWheelRot
			{
				selection="levy kolo rot";
				axis="levy kolo rot";
				minValue=0;
				maxValue=2.300000;
			};
			class RWheelRot: LWheelRot
			{
				selection="pravy kolo rot";
				axis="pravy kolo rot";
			};
			class LFlap
			{
				type="rotation";
				source="flap";
				selection="ls klapka";
				axis="osa ls klapky";
				angle0=0;
				angle1="rad -28.6";
			};
			class RFlap
			{
				type="rotation";
				source="flap";
				selection="ps klapka";
				axis="osa ps klapky";
				angle0=0;
				angle1="rad 28.6";
			};
			class LElevator
			{
				type="rotation";
				source="elevator";
				selection="leva vejskovka";
				axis="osa leve vejskovky";
				minValue=-1;
				maxValue=1;
				angle0="rad 28.6";
				angle1="rad -28.6";
			};
			class RElevator: LElevator
			{
				selection="prava vejskovka";
				axis="osa prave vejskovky";
			};
			class LAileronT
			{
				type="rotation";
				source="aileronT";
				selection="lkh klapka";
				axis="osa lkh klapky";
				minValue=-0.500000;
				maxValue=1.400000;
				angle0=-0.500000;
				angle1=1.400000;
			};
			class RAileronT
			{
				type="rotation";
				source="aileronB";
				selection="pkh klapka";
				axis="osa pkh klapky";
				minValue=-1.400000;
				maxValue=0.500000;
				angle0=-1.400000;
				angle1=0.500000;
			};
			class LAileronB
			{
				type="rotation";
				source="aileronB";
				selection="lkd klapka";
				axis="osa lkd klapky";
				minValue=-1.400000;
				maxValue=0.500000;
				angle0=-1.400000;
				angle1=0.500000;
			};
			class RAileronB
			{
				type="rotation";
				source="aileronT";
				selection="pkd klapka";
				axis="osa pkd klapky";
				minValue=-0.500000;
				maxValue=1.400000;
				angle0=-0.500000;
				angle1=1.400000;
			};
			class Rotor0
			{
				type="rotation";
				source="rotor";
				selection="vrtule";
				axis="osa vrtule";
				angle0=0;
				angle1="rad 360";
			};
			class Rotor1: Rotor0
			{
				selection="vrtule 1";
				axis="osa vrtule 1";
			};
		};
	};
	class Plane_Base_F: Plane
	{
		skeletonName = Plane_Base_F;

		class Animations: Animations
		{
			class Stick_Pilot_Bank
			{
				type="rotation";
				axis="stick_pilot_bank_axis";
				source="aileron";
				selection="stick_pilot";
				minValue="rad -360";
				maxValue="rad 360";
				angle0="rad -44";
				angle1="rad 44";
			};
			class Stick_Pilot_Dive
			{
				type="rotation";
				axis="stick_pilot_dive_axis";
				source="elevator";
				selection="stick_pilot";
				minValue="rad -360";
				maxValue="rad 360";
				angle0="rad -44";
				angle1="rad 44";
			};
		};
	};
	class Longsword: Plane_Base_F
	{
		sectionsInherit = Plane_Base_F;
		sections[] =
		{
			"zbytek",
			"podsvit pristroju",
			"clan",
			"clan_sign",
			"trup",
			"motor",
			"palivo",
			"Light_L",
			"Light_R",
			"sklo predni L",
			"Gear_1_Strut",
			"mainturret",
			"maingun",
			"turret2",
			"gun2",
			"turret3",
			"gun3",
			"turret4",
			"gun4",
			"turret5",
			"gun5",
			"LeftBay",
			"RightBay",
			//"ramp2",
			"camo1"
		};
		skeletonName = "Test_Plane_01_skeleton";
		class Animations: Animations
		{
			class ramp_anim: Rotation
			{
				source = "rampDoor";
				selection = "ramp";
				axis = "ramp_axis";
				minValue = 0.000000;
				maxValue = 1.000000;
				angle0 = 0;
				angle1 = -0.7;
			};	
			/*class ramp2_anim: ramp_anim
			{
				type="translation";
				selection = "ramp2";
				axis = "ramp2_axis";
				minValue = 0.000000;
				maxValue = 1.000000;
				//angle0 = 0;
				//angle1 = -1.6;
				offset0 = 0;
				offset1 = 1.6;
			};*/	
			class leftbay_anim: Rotation
			{
				source = "bayDoor";
				selection = "LeftBay";
				axis = "leftbay_axis";
				minValue = 0.000000;
				maxValue = 1.000000;
				angle0 = 0;
				angle1 = 1.6;
			};
			class rightbay_anim: leftbay_anim
			{
				source = "bayDoor";
				selection = "RightBay";
				axis = "rightbay_axis";
				angle1 = -1.6;
			};
			class FlapL: Rotation
			{
				source = "flap";
				selection = "FlapL";
				axis = "FlapL_axis";
				minValue = 0.000000;
				maxValue = 1.000000;
				angle1 = -0.6;
			};
			class FlapR: FlapL
			{
				selection = "FlapR";
				axis = "FlapR_axis";
			};

			class AileronL: Rotation
			{
				source = "aileron";
				selection = "aileronL";
				axis = "aileronL_axis";
				minValue = -1.000000;
				maxValue = 1.000000;
				angle0 = -0.436332;
				angle1 = 0.523599;
			};
			class AileronR: AileronL
			{
				selection = "aileronR";
				axis = "aileronR_axis";
				angle0 = -0.523599;
				angle1 = 0.436332;
			};
			class Gear_1: Rotation //OK
			{
				type = "rotation";
				source = "Gear";
				selection = "Gear_1";
				axis = "Gear_1_axis";
				memory = 1;
				sourceAddress = "clamp";
				minValue = 0.000000;
				maxValue = 0.600000;
				angle0 = 0.000000;
				angle1 = -1.275;
			};
			class Wheel_1_Hide
			{
				type="hide";
				source = "Gear";
				selection = "Wheel_1";
				minValue = 0.000000;
				maxValue = 1.000000;
				hideValue = 0.600000;
			};
			class Gear_1_Hide
			{
				type="hide";
				source = "Gear";
				selection = "Gear_1_Strut";
				minValue = 0.000000;
				maxValue = 1.000000;
				hideValue = 0.150000;
			};
			class gear_1_Steering: Rotation
			{
				type = "rotation";
				source = "noseWheelTurn";
				selection = "gear_1_Steering";
				axis = "gear_1_damper_axis";
				memory = 1;
				sourceAddress = "clamp";
				minValue = -1.000000;
				maxValue = 1.000000;
				angle0 = 0.349066;
				angle1 = -0.349066;
			};
			class gear_1_Steering2: gear_1_Steering
			{
				selection = "gear_1_Steering2";
				axis = "gear_1_Steering2_axis";
				angle0 = 0.349066*0.7;
				angle1 = -0.349066*0.7;
			};
			class gear_1_damper: Rotation
			{
				type = "translation";
				source = "altRadar";
				selection = "gear_1_damper";
				axis = "gear_1_damper_axis";
				memory = 1;
				sourceAddress = "clamp";
				minValue = 0.000000;
				maxValue = 1.000000;
				offset0 = 0.000000;
				offset1 = 0.120000;
			};
			class gear_1_stabil_1: gear_1_damper
			{
				type = "rotation";
				selection = "gear_1_stabil_1";
				axis = "gear_1_stabil_1_axis";
				angle1 = 0.261799;
			};

			class Gear_2: Rotation
			{
				type = "rotation";
				source = "Gear";
				selection = "Gear_2";
				axis = "Gear_2_axis";
				memory = 1;
				sourceAddress = "clamp";
				minValue = 0.000000;
				maxValue = 0.600000;
				angle1 = 0.000000;
				angle0 = 2;
			};
			class gear_2_hatch: Gear_2
			{
				selection = "gear_2_hatch";
				axis = "gear_2_hatch_axis";
				minValue = 0.400000;
				maxValue = 1.000000;
				angle1 = 0.000000;
				angle0 = 1.6;
			};
			class Gear_2_damper: Rotation
			{
				type = "translation";
				source = "altRadar";
				selection = "Gear_2_damper";
				axis = "Gear_2_damper_axis";
				memory = 1;
				sourceAddress = "clamp";
				minValue = 0.000000;
				maxValue = 1.000000;
				offset0 = 0.000000;
				offset1 = 0.120000;
			};
			class gear_2_stabil: Gear_2_damper
			{
				type = "Rotation";
				selection = "gear_2_stabil";
				axis = "gear_2_stabil_axis";
				angle1 = 0.1;
			};
			
			class Gear_3: Rotation
			{
				type = "rotation";
				source = "Gear";
				selection = "Gear_3";
				axis = "Gear_3_axis";
				memory = 1;
				sourceAddress = "clamp";
				minValue = 0.000000;
				maxValue = 0.600000;
				angle1 = 0.000000;
				angle0 = -2;
			};
			class gear_3_hatch: Gear_3
			{
				selection = "gear_3_hatch";
				axis = "gear_3_hatch_axis";
				minValue = 0.400000;
				maxValue = 1.000000;
				angle1 = 0.000000;
				angle0 = -1.6;
			};
			class Gear_3_damper: Rotation
			{
				type = "translation";
				source = "altRadar";
				selection = "Gear_3_damper";
				axis = "Gear_3_damper_axis";
				memory = 1;
				sourceAddress = "clamp";
				minValue = 0.000000;
				maxValue = 1.000000;
				offset0 = 0.000000;
				offset1 = 0.000000;
			};
			class gear_3_stabil: Gear_3_damper
			{
				type = "Rotation";
				selection = "gear_3_stabil";
				axis = "gear_3_stabil_axis";
				angle1 = 0.1;
			};
			class mainturret //the horizontal moving part of the turret
                	{
                		type="rotationY";
                		source="mainturret";
                		selection="mainturret";
                		axis="OsaVeze";
              		 	animPeriod=0;
                		memory=1;
                		minValue="rad -360";
                		maxValue="rad +360";
                		angle0="rad -360";
                		angle1="rad +360";
                	};
           	class maingun //the vertical moving part of the turret
                	{
                		type="rotationX";
                		source="maingun";
                		selection="maingun";
                		axis="Osa Hlavne";
                		animPeriod=0;
                		memory=1;
                		minValue="rad -360";
               			maxValue="rad +360";
                		angle0="rad -360";
                		angle1="rad +360";
                	};
			class turret2 //the horizontal moving part of the turret
                	{
                		type="rotationY";
                		source="turret2";
                		selection="turret2";
                		axis="Turret2_axis";
              		 	animPeriod=0;
                		memory=1;
                		minValue="rad -360";
                		maxValue="rad +360";
                		angle0="rad -360";
                		angle1="rad +360";
                	};
           	class gun2 //the vertical moving part of the turret
                	{
                		type="rotationX";
                		source="gun2";
                		selection="gun2";
                		axis="Gun2_axis";
                		animPeriod=0;
                		memory=1;
                		minValue="rad -360";
               			maxValue="rad +360";
                		angle0="rad -360";
                		angle1="rad +360";
                	};
			class turret3 //the horizontal moving part of the turret
                	{
                		type="rotationY";
                		source="turret3";
                		selection="turret3";
                		axis="Turret3_axis";
              		 	animPeriod=0;
                		memory=1;
                		minValue="rad -360";
                		maxValue="rad +360";
                		angle0="rad -360";
                		angle1="rad +360";
                	};
           	class gun3 //the vertical moving part of the turret
                	{
                		type="rotationX";
                		source="gun3";
                		selection="gun3";
                		axis="Gun3_axis";
                		animPeriod=0;
                		memory=1;
                		minValue="rad -360";
               			maxValue="rad +360";
                		angle0="rad -360";
                		angle1="rad +360";
                	};
			class turret4 //the horizontal moving part of the turret
                	{
                		type="rotationY";
                		source="turret4";
                		selection="turret4";
                		axis="Turret4_axis";
              		 	animPeriod=0;
                		memory=1;
                		minValue="rad -360";
                		maxValue="rad +360";
                		angle0="rad -360";
                		angle1="rad +360";
                	};
           	class gun4 //the vertical moving part of the turret
                	{
                		type="rotationX";
                		source="gun4";
                		selection="gun4";
                		axis="Gun4_axis";
                		animPeriod=0;
                		memory=1;
                		minValue="rad -360";
               			maxValue="rad +360";
                		angle0="rad -360";
                		angle1="rad +360";
                	};
			class turret5 //the horizontal moving part of the turret
                	{
                		type="rotationY";
                		source="turret5";
                		selection="turret5";
                		axis="Turret5_axis";
              		 	animPeriod=0;
                		memory=1;
                		minValue="rad -360";
                		maxValue="rad +360";
                		angle0="rad -360";
                		angle1="rad +360";
                	};
           	class gun5 //the vertical moving part of the turret
                	{
                		type="rotationX";
                		source="gun5";
                		selection="gun5";
                		axis="Gun5_axis";
                		animPeriod=0;
                		memory=1;
                		minValue="rad -360";
               			maxValue="rad +360";
                		angle0="rad -360";
                		angle1="rad +360";
                	};
			class Wheel_1
			{
				type = "rotation";
				source = "wheel";
				selection = "wheel_1";
				axis = "wheel_1_axis";
				memory = 1;
				sourceAddress = "loop";
				minValue = 0.000000;
				maxValue = 1.000000;
				angle0 = 0.000000;
				angle1 = -3.141593;
			};
			/*class Wheel_2: Wheel_1
			{
				selection = "wheel_2";
				axis = "wheel_2_axis";
			};
			class Wheel_3: Wheel_1
			{
				selection = "wheel_3";
				axis = "wheel_3_axis";
			};*/
			
			class zaslehROT
			{
				type="rotationZ";
				source="Muzzle_flash";            //use ammo count as phase for animation
				sourceAddress="loop";     //loop when phase out of bounds
				selection="zasleh";       //selection we want to rotate
				axis="";                  //no own axis - center of rotation is computed from selection
				centerFirstVertex=true;   //use first vertex of selection as center of rotation
				minValue=0;
				maxValue=4;               //rotation angle will be 360/4 = 90 degrees
				angle0="rad 0";
				angle1="rad 360";
			};
			class PositionLights
			{
				type = hide;
				source = collisionLights;
				selection = "PositionLights";
				minValue = 0.0;
				maxValue = 1.0;
				hideValue = 0.0;
				unHideValue = 0.5;
			};
 			class CollisionLight_Red_blinking: PositionLights
			{
				source = CollisionLightRed_source;
				selection = "CollisionLight_Red";
			};
 			class CollisionLight_White_blinking: PositionLights
			{
				source = CollisionLightWhite_source;
				selection = "CollisionLight_White";
			};
		};
	};
};