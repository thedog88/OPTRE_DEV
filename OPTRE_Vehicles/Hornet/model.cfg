class CfgSkeletons
{
	class Default
	{
		isDiscrete = 1;
		skeletonInherit = "";
		skeletonBones[] = {};
	};
	class Vehicle : Default {};
	class Helicopter: Vehicle
	{
		skeletonInherit="Vehicle";
		skeletonBones[]=
		{
			"velka vrtule dive", "",
			"mala vrtule dive",	"",
			"main rotor", "velka vrtule dive",
			"tail rotor", "mala vrtule dive",
			"otocvez","",
			"otochlaven","otocvez",
			"alt","",
			"alt2","",
			"nm_alt","",
			"nm_alt2","",
			"mph","",
			"mph2","",
			"vert_speed","",
			"vert_speed2","",
			"rpm","",
			"rpm2","",
			"horizont","",
			"horizont2","",
			"compass","",
			"compass2","",
			"hodinova","",
			"hodinova2","",
			"minutova","",
			"minutova2","",
			"damageHide",""
		};
	};
	class hornet_skeleton: Helicopter
	{
		skeletonInherit="Helicopter";
		isDiscrete=0;
		skeletonBones[]=
		{
			"door1","",
			"door2","",
			"cockpit_door","",
			"stick_pilot","",
			"stick_copilot","",
			"lever_pilot","",
			"lever_copilot","",
			"throttle_pilot","lever_pilot",
			"throttle_switch_pilot","lever_pilot",
			"display_off","",
			"horizont1_bank","",
			"horizont1_pitch","",
			"horizont2pilot","",
			"horizont2pilot_b","",
			"horizont3stred","",
			"horizont3stred_b","",
			"fuel","",
			"displays","",
			"compass3","",
			"compass4","",
			"mainturret","",
            "maingun","mainturret",
			"zasleh","maingun",
			"OtocHlavne","",
			"PositionLights",		"",
			"CollisionLight_Red",	"",
			"CollisionLight_White",	""
		};
	};
};
class Rotation
{
	type = "rotation";
	memory = 1;
	minValue = 0;
	maxValue = 1;
	angle0 = 0;
	angle1 = 1;
};
class CfgModels
{
	class Default
	{
		sectionsInherit="";
		sections[] = {};
		skeletonName = "";
	};
	class Vehicle: Default
	{
		sections[] =
		{
			"cislo",
			"grupa",
			"side",
			"sektor",
			"clan",
			"clan_sign",
			"podsvit pristroju",
			"poskozeni",
			"L svetlo",
			"P svetlo",
			"zasleh"
		};
	};
	class Helicopter: Vehicle
	{

		htMin = 60;		// Minimum half-cooling time (in seconds)
		htMax = 1800;	// Maximum half-cooling time (in seconds)
		afMax = 200;	// Maximum temperature in case the model is alive (in celsius)
		mfMax = 100;	// Maximum temperature when the model is moving (in celsius)
		mFact = 0;		// Metabolism factor - number from interval <0, 1> (0 - metabolism has no influence, 1 - metabolism has full influence (no other temperature source will be considered)).
		tBody = 0;	 	// Metabolism temperature of the model (in celsius)

		sectionsInherit="Vehicle";
		sections[]=
		{
			"sklo predni p",
			"sklo predni l",
			"main rotor blur",
			"main rotor static",
			"tail rotor blur",
			"tail rotor static",
			"zasleh_1",
			"motor",
			"elektronika",
			"munice",
			"zbran",
			"vez",
			"trup",
			"clan",
			"clan_sign",
			"glass1",
			"glass2",
			"glass3",
			"glass4",
			"glass5",
			"glass6",
			"podsvit pristroju"
		};
		skeletonName="Helicopter";
		class Animations
		{
			class Rotor_destructX
			{
				type="rotationX";
				source="damage";
				selection="main rotor";
				axis="velka osa";
				animPeriod=0;
				minValue=0.99;
				maxValue=1;
				angle0=0;
				angle1="rad -20";
			};
			class Rotor_destructY:Rotor_destructX
			{
				type="rotationY";
				angle1="rad +40";
			};
			class rotordive_destructX:Rotor_destructX
			{
				selection="rotordive";
				angle1="rad -5";
			};
			class rotordive_destructY:rotordive_destructX
			{
				type="rotationY";
				angle1="rad -15";
			};
			class rotordive_destructZ:rotordive_destructX
			{
				type="rotationZ";
				angle1="rad -5";
			};
			class rotor_static_dive_destructX:Rotor_destructX
			{
				selection="rotor static dive";
				angle1="rad 5";
			};
			class rotor_static_dive_destructY:rotor_static_dive_destructX
			{
				type="rotationY";
				angle1="rad -15";
			};
			class rotor_static_dive_destructZ:rotor_static_dive_destructX
			{
				type="rotationZ";
				angle1="rad -5";
			};
			class mala_vrtule_destructY:Rotor_destructX
			{
				type="rotationY";
				axis="mala osa";
				selection="tail rotor";
				angle1="rad 10";
			};
			class mala_vrtule_destructZ:mala_vrtule_destructY
			{
				type="rotationZ";
				angle1="rad 25";
			};
			// destruct BASE END

			class damageHide
			{
				  type="hide";
				  source="damage";
				  selection="damageHide";
			};
            class IndicatorAltBaro: Rotation
			{
				source="altBaro";
				sourceAddress="loop";
				selection="alt";
				axis="axis_alt";
				memory=0;
				maxValue=304;
				angle1="rad -360";
			};
			class IndicatorAltBaro2: IndicatorAltBaro
			{
				selection="alt2";
				axis="axis_alt2";
			};
			class IndicatorAltRadar: Rotation
			{
				source="altRadar";
				selection="nm_alt";
				axis="axis_nm_alt";
				memory="false";
				maxValue=61;
				angle1="rad -180";
			};
			class IndicatorAltRadar2: IndicatorAltRadar
			{
				selection="nm_alt2";
				axis="axis_nm_alt2";
			};
			class IndicatorSpeed: Rotation
			{
				source="speed";
				selection="mph";
				axis="axis_mph";
				memory="false";
				maxValue=125;
				angle1="rad -320";
			};
			class IndicatorSpeed2: IndicatorSpeed
			{
				selection="mph2";
				axis="axis_mph2";
			};
			class IndicatorVertSpeed: Rotation
			{
				source="vertSpeed";
				selection="vert_speed";
				axis="axis_vert_speed";
				minValue=-30;
				maxValue=30;
				angle1="rad -300";
			};
			class IndicatorVertSpeed2: IndicatorVertSpeed
			{
				selection="vert_speed2";
				axis="axis_vert_speed2";
			};
			class IndicatorRPM: Rotation
			{
				source="rpm";
				selection="rpm";
				axis="axis_rpm";
				memory="false";
				maxValue=12;
				angle1="rad -320";
			};
			class IndicatorRPM2: IndicatorRPM
			{
				selection="rpm2";
				axis="axis_rpm2";
			};
			class IndicatorCompass: Rotation
			{
				source="direction";
				selection="compass";
				axis="axis_compass";
				memory="false";
				minValue=-3.141593;
				maxValue=3.141593;
				angle1="rad -360";
			};
			class IndicatorCompass2: IndicatorCompass
			{
				selection="compass2";
				axis="axis_compass2";
			};
			class WatchHour: Rotation
			{
				source="clockHour";
				selection="hodinova";
				axis="axis_time";
				memory="false";
				angle1="rad -360";
			};
			class WatchHour2: WatchHour
			{
				selection="hodinova2";
				axis="axis_time2";
			};
			class WatchMinute: Rotation
			{
				source="clockMinute";
				selection="minutova";
				axis="axis_time";
				memory="false";
				angle1="rad -360";
			};
			class WatchMinute2: WatchMinute
			{
				selection="minutova2";
				axis="axis_time2";
			};
			class HRotor: Rotation
			{
				source="rotorH";
				selection="main rotor";
				axis="velka osa";
				angle1="2 * 3.1415926536";
			};
			class VRotor: Rotation
			{
				source="rotorV";
				selection="tail rotor";
				axis="mala osa";
				angle1="2 * 3.1415926536";
			};
			class HorizonBank
			{
				type="rotationZ";
				source="horizonBank";
				selection="horizont";
				axis="axis_horizont";
				memory="false";
				minValue="rad -360";
				maxValue="rad +360";
				angle0="rad -360";
				angle1="rad +360";
			};
			class HorizonDive
			{
				type="rotationX";
				source="horizonDive";
				selection="horizont";
				axis="axis_horizont";
				memory=0;
				minValue=-6.283190;
				maxValue=6.283190;
				angle0=-6.283190;
				angle1=6.283190;
			};
			class Horizon2Bank: HorizonBank
			{
				selection="horizont2";
				axis="axis_horizont2";
			};
			class Horizon2Dive: HorizonDive
			{
				selection="horizont2";
				axis="axis_horizont2";
			};
		};
	};
	class hornet: Helicopter
	{
		skeletonName="hornet_skeleton";
		sectionsInherit="Helicopter";
		sections[]=
		{
			"zbytek",
			"Camo1",
			"Camo2",
			"Camo3",
			"Camo4",
			"attach_gun",
			"zasleh",
			"Light_L",
			"Light_L_hitpoint"
		};
		class Animations: Animations
		{
			class MuzzleFlashROT
 			{
 				type="rotationz";
 				source="ammoRandom";            //use ammo count as phase for animation
 				sourceAddress="loop";     //loop when phase out of bounds
 				selection="zasleh";       //selection we want to rotate
 				axis="";                  //no own axis - center of rotation is computed from selection
 				centerFirstVertex=true;   //use first vertex of selection as center of rotation
 				minValue=0;
 				maxValue=4;               //rotation angle will be 360/4 = 90 degrees
 				angle0="rad 0";
 				angle1="rad 360";
 			};

			//------------------------------------ LIGHTS ------------------------------------
			class PositionLights
			{
				type = hide;
				source = collisionLights;
				selection = "PositionLights";
				minValue = 0.0;
				maxValue = 1.0;
				hideValue = 0.0;
				unHideValue = 0.5;
			};
 			class CollisionLight_Red_blinking: PositionLights
			{
				source = CollisionLightRed_source;
				selection = "CollisionLight_Red";
			};
 			class CollisionLight_White_blinking: PositionLights
			{
				source = CollisionLightWhite_source;
				selection = "CollisionLight_White";
			};
		};
	};
	class hornet_wreck: hornet{};
};